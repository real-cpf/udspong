import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
    id 'java-library'
}

group 'org.realcpf'
version '0.1'

repositories {
    mavenCentral()
}

dependencies {
  implementation 'com.lmax:disruptor:4.0.0.RC1'

  implementation 'io.netty:netty-handler:4.1.89.Final'
  // just linux x86_64 now
  implementation 'io.netty:netty-transport-native-epoll:4.1.89.Final:linux-x86_64'

  implementation 'org.slf4j:slf4j-jdk14:2.0.6'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}


jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
//      'Main-Class':'org.realcpf.udsPong.Main'
      'Main-Class':'org.realcpf.udsPong.testM.RunNodeMain'
    )
  }

  if (!configurations.runtimeClasspath.isEmpty()) {
    manifest.attributes('Class-Path':'. lib/' + configurations.runtimeClasspath.collect{
      it.name
    }.join(' lib/'))
  }
}


task copyDependencies(type: Copy) {
  from configurations.runtimeClasspath
  into 'build/libs/lib'
}

/*
task copyLICENSE {
  HashSet<String> set = new HashSet<>();
  java.nio.file.Path license = Paths.get(projectDir as String,"license")
  println(license.toAbsolutePath())
  configurations.runtimeClasspath.forEach {f->{
    URI uri = URI.create(String.format("jar:file:%s",f))
    if (!set.contains(f.toString())) {
      FileSystem fs = FileSystems.newFileSystem(uri,new HashMap<>());
      java.nio.file.Path p = fs.getPath("/");
      java.util.Optional<java.nio.file.Path> lp = Files.list(p).filter {it.getFileName().toString().startsWith("LICENSE")}.findFirst();
      // META-INF/LICENSE
      if (lp.isPresent() && Files.exists(lp.get())) {
        Files.copy(lp.get(),license.resolve(java.nio.file.Path.of(f.getName().replace(".jar",""))))
      }
      set.add(f.toString())
    }

  }}

}

*/

jar.dependsOn(copyDependencies)

test {
    useJUnitPlatform()
}
